<?php

	require_once dirname(dirname(__FILE__)).'/config/load_all.php';

	class Content
	{

		// Attributes
		private $_id;
		private $_recordName;
		private $_zoneId;
		private $_datePublished;
		private $_content;
		private $_isBlog;

		private $_orderItems = array();

		// Constructor
		public function __construct($id = null, $loadByRecordName = false)
		{
			if(!is_null($id))
			{
				if($loadByRecordName)
				{
					$this->loadByRecordName($id);
				}
				else
				{
					$this->loadById($id);
				}
			}
		}

		/* 
		--------------------------------------------
		* Setters
		--------------------------------------------
		*/

		public function setId($id)
		{
			$this->_id = $id;
		}

		public function setRecordName($recordName)
		{
			$this->_recordName = $recordName;
		}

		public function setZoneId($zoneId)
		{
			$this->_zoneId = $zoneId;
		}

		public function setDatePublished($datePublished)
		{
			$this->_datePublished = $datePublished;
		}

		public function setContent($content)
		{
			$this->_content = $content;
		}

		public function setIsBlog($isBlog)
		{
			$this->_isBlog = $isBlog;
		}

		/* 
		--------------------------------------------
		* Getters
		--------------------------------------------
		*/

		public function getId()
		{
			return $this->_id;
		}

		public function getRecordName()
		{
			return $this->_recordName;
		}

		public function getZoneId()
		{
			return $this->_zoneId;
		}

		public function getDatePublished()
		{
			return $this->_datePublished;
		}

		public function getContent()
		{
			return $this->_content;
		}

		public function getIsBlog()
		{
			return $this->_isBlog;
		}
		/* 
		--------------------------------------------
		* DB orientated methods
		--------------------------------------------
		*/

		public function loadById($id)
		{
			// Gets database connection.
			$connection = DBHelper::GetConnection();
			
			// Gets single result from database using newly created connection object to 
			// escape and execute the query.
			$orderFields = DBHelper::GetSingleResult(
				'SELECT * FROM Content WHERE id = ' . DBHelper::EscapeString($id, $connection),
				$connection
			);

			// Close the connection to free up resources.
			DBHelper::CloseConnection($connection);
			
			if(count($orderFields) > 0)
			{
				$this->_loadFromArray($orderFields);
			}

		}

		public function loadByRecordName($recordName)
		{
			// Gets database connection.
			$connection = DBHelper::GetConnection();
			
			// Gets single result from database using newly created connection object to 
			// escape and execute the query.
			$orderFields = DBHelper::GetSingleResult(
				'SELECT * FROM Content WHERE record_name = ' . DBHelper::QuoteEscapeString($recordName, $connection),
				$connection
			);

			// Close the connection to free up resources.
			DBHelper::CloseConnection($connection);
			
			if(count($orderFields) > 0)
			{
				$this->_loadFromArray($orderFields);
			}

		}

		private function _loadFromArray($orderFields)
		{
			
			$this->setId($orderFields['id']);
			
			$this->setRecordName($orderFields['record_name']);
			$this->setZoneId($orderFields['zone_id']);
			$this->setDatePublished($orderFields['date_published']);
			$this->setContent($orderFields['content']);
			$this->setIsBlog($orderFields['is_blog'] == '0');

		}

		public function save()
		{
			// Grabs database connection
			$connection = DBHelper::GetConnection();

			// Creating an array of all the fields to be used when inserting/updating the db
			$fields = array(
				'record_name = '.DBHelper::QuoteEscapeString($this->getRecordName(), $connection),
				'zone_id = '.DBHelper::QuoteEscapeString($this->getZoneId(), $connection),
				'date_published = '.DBHelper::QuoteEscapeString($this->getDatePublished(), $connection),
				'content = '.DBHelper::QuoteEscapeString($this->getContent(), $connection),
				'is_blog = '.DBHelper::QuoteEscapeString($this->getIsBlog(), $connection)
			);

			if($this->getId() == '')
			{
				// Creating sql insert statement from generated assoc array $fields
				$sql = 'INSERT INTO Content SET '.implode(', ', $fields);

				// Exec sql insert statement
				if(!DBHelper::ExecuteQuery($sql, $connection))
				{
					// Log this issue for later and tell the user something went wrong...
					LogHelper::AddLog('Content insert query execution failed with sql:"'.$sql.'"');
					die('There was an error handling this action and it has been logged; please try again later.');
				}

				// Update id attr in model to last inserted id generated by mysql
				$this->setId($connection->insert_id);
			}
			else
			{
				// Creating sql update statement from generated assoc array $fields
				$sql = 'UPDATE Content 
							SET '.implode(', ', $fields).'
							WHERE id = '.DBHelper::EscapeString($this->getId(), $connection);

				// Exec sql update statement
				if(!DBHelper::ExecuteQuery($sql, $connection))
				{
					// Log this issue for later and tell the user something went wrong...
					LogHelper::AddLog('Content update query execution failed with sql:"'.$sql.'"');
					die('There was an error handling this action and it has been logged; please try again later.');
				}

			}

			// Close connection to db
			DBHelper::CloseConnection($connection);
		
		}

	}

?>